{%- import "/macros.proto.j2" as macros %}

{%- macro declare_object_key_traits(object, cpp_objects_namespace) -%}
template <>
struct TObjectKeyTraits<{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}>
{
    using TTypes = std::tuple<
    {%- for field in object.key_fields %}
        {{ field.cpp_type }}{{ "," if not loop.last }}
    {%- endfor %}
    >;
};
{%- endmacro -%}

{%- macro declare_object_plugin_traits(object, cpp_objects_namespace, cpp_server_plugins_namespace) -%}
template <>
struct TObjectPluginTraits<{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}>
{
    using TType = {{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name}};

    static TType* Downcast({{ cpp_objects_namespace }}::T{{ object.camel_case_name }}* object);
};

template <>
struct TObjectPluginTraits<{{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}>
{
    static {{ cpp_objects_namespace }}::T{{ object.camel_case_name}}* Upcast(
        {{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}* object);
};
{%- endmacro -%}

{%- macro define_object_plugin_traits(object, cpp_objects_namespace, cpp_server_plugins_namespace) -%}
{{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}*
TObjectPluginTraits<{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}>::Downcast(
    {{ cpp_objects_namespace }}::T{{ object.camel_case_name }}* object)
{
    auto* castedObject = dynamic_cast<{{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}*>(object);
    YT_VERIFY(castedObject);
    return castedObject;
};

{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}*
TObjectPluginTraits<{{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}>::Upcast(
    {{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}* object)
{
    return object;
};
{%- endmacro -%}

{%- macro objects_traits(objects) -%}
using TObjectTypes = ::NYT::NOrm::NMpl::TTypes<
{%- for object in objects %}
    T{{ object.camel_case_name }}{% if not loop.last %},{% else %}>;{% endif %}
{%- endfor %}

template <class T>
concept CObjectType = ::NYT::NOrm::NMpl::COneOfTypes<T, TObjectTypes>;

//! Helper to get ObjectType by runtime enum type.
//! TInvokable must have signature `void <typename T>()`,
template <::NYT::NOrm::NMpl::CInvocableForEachType<TObjectTypes> TInvokable>
bool InvokeForObjectType(EObjectType objectType, TInvokable&& consumer)
{
    bool found = false;
    TObjectTypes::ForEach([&] <CObjectType T> {
        if (T::Type == static_cast<NYT::NOrm::NClient::NObjects::TObjectTypeValue>(objectType)) {
            found = true;
            consumer.template operator()<T>();
        }
    });
    return found;
}
{%- endmacro -%}

{%- macro override(field) -%}
{{ "_OVERRIDE" if field.cpp_override else "" }}
{%- endmacro -%}

{%- macro declare_fields(object, message, field_name, cpp_server_proto_namespace, cpp_objects_namespace) -%}
    {%- if message.is_cpp_composite %}
    class T{{ field_name }}
    {
    public:
        explicit T{{ field_name }}(T{{ object.camel_case_name }}* object);

        {%- for field in message.composite_fields %}
{##}
        {{- declare_fields(object, field.value_message, field.cpp_camel_case_name, cpp_server_proto_namespace, cpp_objects_namespace) | indent(4) }}
        {%- endfor %}
        {%- for field in (message.column_fields + message.reference_fields_deprecated) | rejectattr("is_primary") %}
{##}
            {%- if field.reference_deprecated %}
        using T{{ field.cpp_camel_case_name }}Attribute =
            NYT::NOrm::NServer::NObjects::T{{ field.reference_deprecated.type.value }}Attribute<{#
                #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}, {#
                #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}>;
        static const T{{ field.cpp_camel_case_name }}Attribute::TDescriptor {{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(T{{ field.cpp_camel_case_name }}Attribute, {{ field.cpp_camel_case_name }});
            {%- else %}
        using T{{ field.cpp_camel_case_name }}_ = {{ field.cpp_type }};
                {%- if field.is_timestamp_attribute %}
        static const NYT::NOrm::NServer::NObjects::TTimestampAttributeDescriptor {{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(TTimestampAttribute, {{ field.cpp_camel_case_name }});
                {%- else %}
        {%- set TAttribute -%}
            TScalar{%- if field.aggregate -%}Aggregated{%- endif -%}Attribute
        {%- endset %}
        static const NYT::NOrm::NServer::NObjects::{{ TAttribute }}Descriptor<{#
            #}T{{ object.camel_case_name }}, {#
            #}T{{ field.cpp_camel_case_name }}_> {{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(NYT::NOrm::NServer::NObjects::{{ TAttribute }}<T{{ field.cpp_camel_case_name }}_>, {{ field.cpp_camel_case_name }});
                {%- endif %}
            {%- endif %}
        {%- endfor %}
        {%- for field in (message.reference_fields) %}

        using T{{ field.cpp_camel_case_name }}Attribute =
            NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceAttribute<{#
                #}T{{ object.camel_case_name }}, {#
                #}T{{ field.reference.foreign_object.camel_case_name }}>;
        static const NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceDescriptor<{#
                #}T{{ object.camel_case_name }}, {#
                #}T{{ field.reference.foreign_object.camel_case_name }}> {{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(T{{ field.cpp_camel_case_name }}Attribute, {{ field.cpp_camel_case_name }});
        {%- endfor %}
        {%- for field in message.foreign_view_fields_deprecated %}

        using T{{ field.cpp_camel_case_name }}AttributeDescriptor =
            NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttributeDescriptor<{#
                #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.owner.camel_case_name }}, {#
                #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.foreign_object.camel_case_name }}>;
        static const T{{ field.cpp_camel_case_name }}AttributeDescriptor {{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(
            NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttribute,
            {{ field.cpp_camel_case_name }});
        {%- endfor %}
        {%- for field in message.view_fields %}

        static const NYT::NOrm::NServer::NObjects::T{{ field.viewed_reference.kind }}ViewDescriptor<{#
                #}T{{ object.camel_case_name }}, {#
                #}T{{ field.viewed_reference.foreign_object.camel_case_name }}> {#
                #}{{ field.cpp_camel_case_name }}Descriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT(
            NYT::NOrm::NServer::NObjects::TViewAttributeBase,
            {{ field.cpp_camel_case_name }});
        {%- endfor %}
        {%- set etcs = message.etcs -%}
        {%- for etc in etcs %}
{##}
        {%- if message.is_composite or (etcs | length) > 1 %}
        using T{{ etc.camel_case_name }}Etc = {{ cpp_server_proto_namespace }}::{{ message.etc_type_name }}{{ etc.camel_case_name }}Etc;
        {%- else %}
        using T{{ etc.camel_case_name }}Etc = {{ message | message_cpp_full_name }};
        {%- endif %}
        static const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, T{{ etc.camel_case_name }}Etc> {{ etc.camel_case_name }}EtcDescriptor;
        DEFINE_BYREF_RW_PROPERTY_NO_INIT(NYT::NOrm::NServer::NObjects::TScalarAttribute<T{{ etc.camel_case_name }}Etc>, {{ etc.camel_case_name }}Etc);
        {%- endfor %}
    };

    DEFINE_BYREF_RW_PROPERTY_NO_INIT(T{{ field_name }}, {{ field_name }});

    {%- else %}

    using T{{ field_name }} = {{ message | message_cpp_full_name }};
    static const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, T{{ field_name }}> {{ field_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT(NYT::NOrm::NServer::NObjects::TScalarAttribute<T{{ field_name }}>, {{ field_name }});
    {%- endif %}
{%- endmacro -%}

{%- macro generate_index_attributes(attributes) -%}
    std::vector<NYT::NOrm::NServer::NObjects::TIndexAttribute>{
        {%- for attribute in attributes %}
        NYT::NOrm::NServer::NObjects::TIndexAttribute(
            &{%- if attribute.column_field.is_column -%}
                {%- if attribute.column_field.parent.cpp_object_field_name != "Meta" -%}
                    {{ attribute.column_field.parent.cpp_object_field_name }}().
                {%- endif -%}
                {{ attribute.column_field.cpp_camel_case_name }}()
            {%- elif attribute.column_field.value_message.has_etc -%}
                {%- if attribute.column_field.value_message.cpp_object_field_name != "Meta" -%}
                    {{ attribute.column_field.value_message.cpp_object_field_name }}().Etc()
                {%- else -%}
                    MetaEtc()
                {%- endif -%}
            {%- else -%}
                {{ attribute.column_field.parent.cpp_object_field_name }}()
            {%- endif -%},
            "{{ attribute.suffix }}",
            /*repeated*/ {{ attribute.field.is_repeated | to_cpp_bool }}),
        {%- endfor %}
    }
{%- endmacro %}

{%- macro property_getter(target_field) -%}
    return &obj->
    {%- if target_field.reference_deprecated.source_field.parent.cpp_object_field_name != "Meta" -%}
        {{ target_field.reference_deprecated.source_field.parent.cpp_object_field_name }}().
    {%- endif -%}
        {{ target_field.reference_deprecated.source_field.cpp_camel_case_name }}();
{%- endmacro -%}

{%- macro reference_table_keys(table, field_filter) -%}
    {%- for column in table.table_columns | selectattr("is_key") | rejectattr("is_hash") |
            rejectattr("is_parent_key_part") | selectattr(field_filter) -%}
        &{{ table | references_table_camel_case }}Table.{{ column.full_cpp_name }}{{ ", " if not loop.last }}
    {%- endfor %}
{%- endmacro -%}

{%- macro attribute_accessor(attribute) -%}
{% for field in attribute.prefix_fields %}{% if loop.index != 0 and field.snake_case_name != "meta" %}{{ field.camel_case_name }}().{% endif %}{% endfor %}
{%- if attribute.column_field.is_column -%}
    {{ attribute.column_field.cpp_camel_case_name }}()
{%- elif attribute.column_field.value_message.has_etc -%}
    {%- if attribute.column_field.value_message.cpp_object_field_name != "Meta" -%}
        {{ attribute.column_field.value_message.cpp_object_field_name }}().Etc()
    {%- else -%}
        MetaEtc()
    {%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro define_fields(object, message, field_names, cpp_objects_namespace) -%}
    {%- set field_name = field_names | last -%}
    {%- set class_name -%}
        T{{([object.camel_case_name] + field_names) | join("::T")}}
    {%- endset %}
    {%- set accessor -%}
        obj->{{ field_names | join("().") }}()
    {%- endset -%}
    {%- set comma = joiner(",") -%}
    {%- if message.is_cpp_composite %}
{{ class_name }}::T{{ field_name }}(T{{ object.camel_case_name }}* object)
        {%- for field in message.composite_fields %}
    {{ comma() or ":" }} {{ field.cpp_camel_case_name }}_(object)
        {%- endfor %}
        {%- for field in (message.column_fields + message.reference_fields_deprecated) | rejectattr("is_primary") %}
    {{ comma() or ":" }} {{ field.cpp_camel_case_name }}_(object, &{{ field.cpp_camel_case_name }}Descriptor)
        {%- endfor %}
        {%- for field in message.reference_fields %}
    {{ comma() or ":" }} {{ field.cpp_camel_case_name }}_(
        object,
        {{ field.cpp_camel_case_name }}Descriptor,
        std::make_unique<NYT::NOrm::NServer::NObjects::T{{ field.reference.key_storage_kind}}{{ field.reference.kind}}KeyStorageDriver>(object, {{ field.cpp_camel_case_name }}Descriptor.KeyStorageDescriptor))
        {%- endfor %}
        {%- for field in (message.foreign_view_fields_deprecated) | rejectattr("is_primary") %}
    {{ comma() or ":" }} {{ field.cpp_camel_case_name }}_(object)
        {%- endfor %}
        {%- for field in (message.view_fields) %}
    {{ comma() or ":" }} {{ field.cpp_camel_case_name }}_(object)
        {%- endfor %}
        {%- for etc in message.etcs %}
    {{ comma() or ":" }} {{ etc.camel_case_name }}Etc_(object, &{{ etc.camel_case_name }}EtcDescriptor)
        {%- endfor %}
{ }
        {%- for field in message.composite_fields %}
{##}
        {{- define_fields(object, field.value_message, field_names + [field.cpp_camel_case_name], cpp_objects_namespace) }}
        {%- endfor %}
        {%- for field in (message.column_fields + message.reference_fields_deprecated) | rejectattr("is_primary") %}
{##}
            {%- if field.reference_deprecated %}
const NYT::NOrm::NServer::NObjects::T{{ field.reference_deprecated.type.value }}AttributeDescriptor<{#
    #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}, {#
    #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}> {#
    #}{{ class_name }}::{{ field.cpp_camel_case_name }}Descriptor {
                {%- if field.reference_deprecated.type.value in ("OneToMany", "ManyToManyTabular") %}
    &{{ field.reference_deprecated.table | references_table_camel_case }}Table,
    { {{ reference_table_keys(field.reference_deprecated.table, "is_reference_target") }} },
    { {{ reference_table_keys(field.reference_deprecated.table, "is_reference_source") }} },
    [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}* obj) { return &{{ accessor }}.{{ field.cpp_camel_case_name }}(); },
    [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}* obj) { return &obj->{{ attribute_accessor(field.reference_deprecated.source_attribute) }}; },
    /*foreignObjectTableKey*/ {{ field.index_over_reference_table | to_cpp_bool }},
                {%- else %}
    &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
    [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}* obj) { return &{{ accessor }}.{{ field.cpp_camel_case_name }}(); },
    [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}* obj) { return &obj->Status().{{ object | collective_name }}{{ field.reference_deprecated.table | references_table_suffix_camel_case }}(); },
                {%- endif %}
    /*forbidNonEmptyRemoval*/ {{ field.reference_deprecated.forbid_non_empty_removal | to_cpp_bool }}
                {%- if not field.reference_deprecated.nullable %},
    /*nullable*/ {{ field.reference_deprecated.nullable | to_cpp_bool }}
                {%- endif %}
};
            {%- else %}
                {%- if field.is_timestamp_attribute -%}
const TTimestampAttributeDescriptor {{ class_name}}::{{ field.cpp_camel_case_name }}Descriptor{
    &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
};
                {%- else %}
const NYT::NOrm::NServer::NObjects::TScalar{%- if field.aggregate -%}Aggregated{%- endif -%}AttributeDescriptor<T{{ object.camel_case_name }}, {{ field.cpp_type }}>
{{ class_name }}::{{ field.cpp_camel_case_name }}Descriptor{
    &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* obj) { return &{{ accessor }}.{{ field.cpp_camel_case_name }}(); }
};
                {%- endif %}
            {%- endif %}
        {%- endfor %}
        {%- for field in message.reference_fields %}

const NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceDescriptor<{#
    #}T{{ object.camel_case_name }}, {#
    #}T{{ field.reference.foreign_object.camel_case_name }}> {#
    #}{{ class_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    .ForwardAttributeGetter = [] (T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_getter }}; },
    .InverseAttributeGetter = [] (T{{ field.reference.foreign_object.camel_case_name }}* obj) { return &obj->{{ field.reference.foreign_backref_field.cpp_getter }}; },
    .KeyStorageDescriptor = NYT::NOrm::NServer::NObjects::T{{ field.reference.key_storage_kind }}KeyStorageDescriptor{
        {%- for key, value in field.reference.key_storage_options.items() %}
        .{{ key }} = {{ value }},
        {%- endfor %}
    },
        {%- if field.reference.settings %}
    .Settings = NYT::NOrm::NServer::NObjects::TReferenceAttributeSettings{
        {%- for key, value in field.reference.settings.items() %}
        .{{ key }} = {{ value }},
        {%- endfor %}
    },
        {%- endif %}
};
        {%- endfor %}
        {%- for field in message.foreign_view_fields_deprecated %}

const NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttributeDescriptor<{#
    #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.owner.camel_case_name }}, {#
    #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.foreign_object.camel_case_name }}> {#
    #}{{ class_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    {{ class_name }}::{{ field.foreign_view_key_field.cpp_camel_case_name }}Descriptor,
    [] (const T{{ object.camel_case_name }}* obj) { return &{{ accessor }}.{{ field.cpp_camel_case_name }}(); }
};
        {%- endfor %}
        {%- for field in message.view_fields %}

const NYT::NOrm::NServer::NObjects::T{{ field.viewed_reference.kind }}ViewDescriptor<{#
    #}T{{ object.camel_case_name }}, {#
    #}T{{ field.viewed_reference.foreign_object.camel_case_name }}> {#
    #}{{ class_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    .ReferenceDescriptor = {{ field.viewed_reference.field.cpp_descriptor }},
    .ViewAttributeGetter = [] (T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_getter }}; }
};
        {%- endfor %}
        {%- for etc in message.etcs %}

const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, {{ class_name }}::T{{ etc.camel_case_name }}Etc>
{{ class_name }}::{{ etc.camel_case_name }}EtcDescriptor{
    &{{ object.table_cpp_name }}.{{ etc.column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* obj) { return &{{ accessor }}.{{ etc.camel_case_name }}Etc(); }
};
        {%- endfor %}
    {%- else %}

const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, {{ class_name }}>
T{{ object.camel_case_name }}::{{ field_name }}Descriptor{
    {%- set etc = message.etcs | last %}
    &{{ object.table_cpp_name }}.{{ etc.column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* obj) { return &{{ accessor }}; }
};
    {%- endif %}
{%- endmacro %}

{%- macro declare_object(object, cpp_server_proto_namespace, cpp_objects_namespace, yp_compatible) %}
class T{{ object.camel_case_name }}
    : public TDataModelObject
    , public NYT::TRefTracked<T{{ object.camel_case_name }}>
{
public:
    static constexpr NYT::NOrm::NClient::NObjects::TObjectTypeValue Type =
    {%- if not yp_compatible %}
        static_cast<NYT::NOrm::NClient::NObjects::TObjectTypeValue>(EObjectType::{{ object.camel_case_name }});
    {%- else %}
        TObjectTypeValues::{{ object.camel_case_name }};
    {%- endif %}

    T{{ object.camel_case_name }}(
    {%- for field in object.key_fields %}
        const {{ field.cpp_type }}& {{ field.lower_camel_case_name }},
    {%- endfor %}
    {%- if object.parent %}
        const NYT::NOrm::NClient::NObjects::TObjectKey& parentKey,
    {%- endif %}
        NYT::NOrm::NServer::NObjects::IObjectTypeHandler* typeHandler,
        NYT::NOrm::NServer::NObjects::ISession* session);
    {%- if object.custom_cpp_object %}
    virtual ~T{{ object.camel_case_name }}() = 0;
    {%- endif %}

    virtual NYT::NOrm::NClient::NObjects::TObjectTypeValue GetType() const override
    {
        return Type;
    }

    virtual NYT::NOrm::NClient::NObjects::TObjectKey GetKey() const override;
    {%- for field in object.key_fields %}

protected:
    const {{ field.cpp_type }} {{ field.cpp_camel_case_name }}_;

public:
    const {{ field.cpp_type }}& Get{{ field.cpp_camel_case_name }}() const
    {
        return {{ field.cpp_camel_case_name }}_;
    }
    {%- endfor %}
    {%- if object.parent %}

private:
    NYT::NOrm::NServer::NObjects::TParentKeyAttribute ParentKeyAttribute_;

public:
    NYT::NOrm::NClient::NObjects::TObjectKey GetParentKey(std::source_location location = std::source_location::current()) const override;
    NYT::NOrm::NServer::NObjects::TParentKeyAttribute* GetParentKeyAttribute() override;
    {%- for field in object.all_key_fields | selectattr("is_parent_key_field") %}
    {{ field.cpp_type }} {{ object.parent.camel_case_foreign_name }}{{ field.cpp_camel_case_name }}(std::source_location location = std::source_location::current()) const;
    {%- endfor %}

    using T{{ object.parent.camel_case_name }}Attribute =
        NYT::NOrm::NServer::NObjects::TParentAttribute<T{{ object.parent.camel_case_name }}>;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT(T{{ object.parent.camel_case_name }}Attribute, {{ object.parent.camel_case_foreign_name }});
    {%- endif %}
    {%- for child in object.children %}
{##}
    using T{{ child.camel_case_name }}Attribute =
        NYT::NOrm::NServer::NObjects::TChildrenAttribute<T{{ child.camel_case_name }}>;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT(T{{ child.camel_case_name }}Attribute, {{ child | collective_foreign_name }});
    {%- endfor %}
    {%- for field in object.meta.fields | rejectattr("is_primary") | selectattr("is_column") | rejectattr("system") | rejectattr("is_parent_key_field") %}
{##}
        {%- if field.reference_deprecated %}
    using T{{ field.cpp_camel_case_name }}Attribute =
        NYT::NOrm::NServer::NObjects::T{{ field.reference_deprecated.type.value }}Attribute<{#
            #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}, {#
            #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}>;
    static const T{{ field.cpp_camel_case_name }}Attribute::TDescriptor {{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(T{{ field.cpp_camel_case_name }}Attribute, {{ field.cpp_camel_case_name }});
        {%- elif field.transitive_reference %}
    using T{{ field.cpp_camel_case_name }}Attribute =
        NYT::NOrm::NServer::NObjects::TOneTransitiveAttribute<{#
            #}T{{ field.transitive_reference.owner.camel_case_name }}, {#
            #}T{{ field.transitive_reference.foreign_object.camel_case_name }}>;
    static const T{{ field.cpp_camel_case_name }}Attribute::TDescriptor {{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(T{{ field.cpp_camel_case_name }}Attribute, {{ field.cpp_camel_case_name }});
        {%- else %}
    using T{{ field.cpp_camel_case_name }}_ = {{ field.cpp_type }};
    static const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<{#
        #}T{{ object.camel_case_name }}, {#
        #}T{{ field.cpp_camel_case_name }}_> {{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(NYT::NOrm::NServer::NObjects::TScalarAttribute<T{{ field.cpp_camel_case_name }}_>, {{ field.cpp_camel_case_name }});
        {%- endif %}
    {%- endfor %}
    {%- for field in (object.meta.reference_fields) %}
    using T{{ field.cpp_camel_case_name }}Attribute =
        NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceAttribute<{#
            #}T{{ object.camel_case_name }}, {#
            #}T{{ field.reference.foreign_object.camel_case_name }}>;
    static const NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceDescriptor<{#
            #}T{{ object.camel_case_name }}, {#
            #}T{{ field.reference.foreign_object.camel_case_name }}> {{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(T{{ field.cpp_camel_case_name }}Attribute, {{ field.cpp_camel_case_name }});
    {%- endfor %}
    {%- for field in object.meta.foreign_view_fields_deprecated %}
    using T{{ field.cpp_camel_case_name }}AttributeDescriptor =
    NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttributeDescriptor<{#
        #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.owner.camel_case_name }}, {#
        #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.foreign_object.camel_case_name }}>;
    static const T{{ field.cpp_camel_case_name }}AttributeDescriptor {{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT{{ override(field) }}(
        NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttribute,
        {{ field.cpp_camel_case_name }});
    {%- endfor %}
    {%- for field in object.meta.view_fields %}
    static const NYT::NOrm::NServer::NObjects::T{{ field.viewed_reference.kind }}ViewDescriptor<{#
            #}T{{ object.camel_case_name }}, {#
            #}T{{ field.viewed_reference.foreign_object.camel_case_name }}> {#
            #}{{ field.cpp_camel_case_name }}Descriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT(
        NYT::NOrm::NServer::NObjects::TViewAttributeBase,
        {{ field.cpp_camel_case_name }});
    {%- endfor %}

    using TMetaEtc = typename {{ cpp_server_proto_namespace }}::{{ object.meta.etc_type_name }}Etc;
    static const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<{#
        #}T{{ object.camel_case_name }}, TMetaEtc> MetaEtcDescriptor;
    DEFINE_BYREF_RW_PROPERTY_NO_INIT(NYT::NOrm::NServer::NObjects::TScalarAttribute<TMetaEtc>, MetaEtc);

    void ScheduleUuidLoad() const override;
    NYT::NOrm::NClient::NObjects::TObjectId GetUuid(std::source_location location = std::source_location::current()) const override;
    TString GetName(std::source_location location = std::source_location::current()) const override;
{##}
    {{- declare_fields(object, object.spec, "Spec", cpp_server_proto_namespace, cpp_objects_namespace) }}
{##}
    {{- declare_fields(object, object.status, "Status", cpp_server_proto_namespace, cpp_objects_namespace) }}

    {%- if object.attribute_migrations %}

    enum class EAttributeMigrations : int {
    {%- for migration in object.attribute_migrations %}
        {{ macros.attribute_camel_case_name(migration.source) }}To{{ macros.attribute_camel_case_name(migration.target) }}, // {{ migration.source.full_path }} to {{ migration.target.full_path }}
    {%- endfor %}
    };
    {%- endif %}
};
{%- endmacro -%}

{%- macro define_object(object, cpp_objects_namespace) -%}
    {%- for field in object.meta.fields | rejectattr("is_primary") | selectattr("is_column") | rejectattr("system") | rejectattr("is_parent_key_field") %}
{##}
        {%- if field.reference_deprecated %}
const NYT::NOrm::NServer::NObjects::T{{ field.reference_deprecated.type.value }}AttributeDescriptor<{#
    #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}, {#
    #}{{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}>
    T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor {
        &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
        [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.owner.camel_case_name }}* v) { return &v->{{ field.cpp_camel_case_name }}(); },
        [] ({{ cpp_objects_namespace }}::T{{ field.reference_deprecated.foreign_object.camel_case_name }}* v) { return &v->Status().{{ object | collective_name }}{{ field.reference_deprecated.table | references_table_suffix_camel_case }}(); },
        /*forbidNonEmptyRemoval*/ {{ field.reference_deprecated.forbid_non_empty_removal | to_cpp_bool }}
            {%- if not field.reference_deprecated.nullable %},
        /*nullable*/ {{ field.reference_deprecated.nullable | to_cpp_bool }}
            {%- endif %}
    };
        {%- elif field.transitive_reference %}
const NYT::NOrm::NServer::NObjects::TOneTransitiveAttributeDescriptor<{#
    #}T{{ field.transitive_reference.owner.camel_case_name }}, {#
    #}T{{ field.transitive_reference.foreign_object.camel_case_name }}> {#
    #}T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* {{ object.lower_camel_case_name }}) {
        return &{{ object.lower_camel_case_name }}->{{ field.cpp_camel_case_name }}();
    },
    [] (T{{ object.camel_case_name }}* {{ object.lower_camel_case_name }}) {
    {%- set foreign_object = field.transitive_reference.foreign_object %}
        auto setter = [{{ object.lower_camel_case_name }}] (T{{ foreign_object.camel_case_name }}* {{ foreign_object.lower_camel_case_name }}) {
            {{ object.lower_camel_case_name }}->{{ field.cpp_camel_case_name }}().StoreInitial({{ foreign_object.lower_camel_case_name }});
        };
        {%- macro open_preload(current_object, next_object) %}
        {{ current_object.lower_camel_case_name }}->GetParentKeyAttribute()->ScheduleParentLoad();
        {{ current_object.lower_camel_case_name }}->GetSession()->ScheduleLoad([{{ current_object.lower_camel_case_name }}, setter=std::move(setter)] (auto*) {
            if ({{ current_object.lower_camel_case_name }}->IsRemoved()) {
                return;
            }
            auto* {{ next_object.lower_camel_case_name }} = {{ current_object.lower_camel_case_name }}
                ->GetTypeHandler()
                ->GetParent({{ current_object.lower_camel_case_name }})
                ->As<T{{ next_object.camel_case_name }}>();
        {%- endmacro %}
        {%- for link in field.transitive_reference.links -%}
        {{ open_preload(link.object_from, link.object_to) | indent((loop.index0) * 4) }}
        {%- endfor %}
                setter({{ foreign_object.lower_camel_case_name }});
        {%- macro close_preload() %}
        });
        {%- endmacro %}
        {%- for _ in field.transitive_reference.links -%}
        {{ close_preload() | indent((loop.length - loop.index) * 4) }}
        {%- endfor %}
    }
};
        {%- else %}
const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, {{ field.cpp_type }}>
T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor{
    &{{ object.table_cpp_name }}.{{ field.column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_camel_case_name }}(); }
};
        {%- endif %}
    {%- endfor %}
    {%- for field in object.meta.foreign_view_fields_deprecated %}
{##}
const NYT::NOrm::NServer::NObjects::T{{ field.foreign_view_key_field.reference_deprecated.type.value }}ViewAttributeDescriptor<{#
    #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.owner.camel_case_name }}, {#
    #}{{ cpp_objects_namespace }}::T{{ field.foreign_view_key_field.reference_deprecated.foreign_object.camel_case_name }}> {#
    #}T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    T{{ object.camel_case_name }}::{{ field.foreign_view_key_field.cpp_camel_case_name }}Descriptor,
    [] (const T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_camel_case_name }}(); }
};
    {%- endfor %}
    {%- for field in object.meta.reference_fields %}

const NYT::NOrm::NServer::NObjects::T{{ field.reference.kind }}ReferenceDescriptor<{#
    #}T{{ object.camel_case_name }}, {#
    #}T{{ field.reference.foreign_object.camel_case_name }}> {#
    #}T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    .ForwardAttributeGetter = [] (T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_getter }}; },
    .InverseAttributeGetter = [] (T{{ field.reference.foreign_object.camel_case_name }}* obj) { return &obj->{{ field.reference.foreign_backref_field.cpp_getter }}; },
    .KeyStorageDescriptor = NYT::NOrm::NServer::NObjects::T{{ field.reference.key_storage_kind }}KeyStorageDescriptor{
        {%- for key, value in field.reference.key_storage_options.items() %}
        .{{ key }} = {{ value }},
        {%- endfor %}
    },
        {%- if field.reference.settings %}
    .Settings = NYT::NOrm::NServer::NObjects::TReferenceAttributeSettings{
        {%- for key, value in field.reference.settings.items() %}
        .{{ key }} = {{ value }},
        {%- endfor %}
    },
        {%- endif %}
};
    {%- endfor %}
    {%- for field in object.meta.view_fields %}

const NYT::NOrm::NServer::NObjects::T{{ field.viewed_reference.kind }}ViewDescriptor<{#
    #}T{{ object.camel_case_name }}, {#
    #}T{{ field.viewed_reference.foreign_object.camel_case_name }}> {#
    #}T{{ object.camel_case_name }}::{{ field.cpp_camel_case_name }}Descriptor {
    .ReferenceDescriptor = {{ field.viewed_reference.field.cpp_descriptor }},
    .ViewAttributeGetter = [] (T{{ object.camel_case_name }}* obj) { return &obj->{{ field.cpp_getter }}; }
};
    {%- endfor %}
    {%- for column in object.meta.etc_columns %}

const NYT::NOrm::NServer::NObjects::TScalarAttributeDescriptor<T{{ object.camel_case_name }}, T{{ object.camel_case_name }}::TMetaEtc>
T{{ object.camel_case_name }}::MetaEtcDescriptor{
    &{{ object.table_cpp_name }}.{{ column.full_cpp_name }},
    [] (T{{ object.camel_case_name }}* object) { return &object->MetaEtc(); }
};
    {%- endfor %}

////////////////////////////////////////////////////////////////////////////////
{{ define_fields(object, object.spec, ["Spec"], cpp_objects_namespace) }}
{{ define_fields(object, object.status, ["Status"], cpp_objects_namespace) }}

////////////////////////////////////////////////////////////////////////////////

T{{ object.camel_case_name }}::T{{ object.camel_case_name }}(
    {%- for field in object.key_fields %}
    const {{ field.cpp_type }}& {{ field.lower_camel_case_name }},
    {%- endfor %}
    {%- if object.parent %}
    const NYT::NOrm::NClient::NObjects::TObjectKey& parentKey,
    {%- endif %}
    IObjectTypeHandler* typeHandler,
    ISession* session)
    : TDataModelObject(typeHandler, session)
    {%- for field in object.key_fields %}
    , {{ field.cpp_camel_case_name }}_({{ field.lower_camel_case_name }})
    {%- endfor %}
    {%- if object.parent %}
    , ParentKeyAttribute_(this, parentKey)
    , {{ object.parent.camel_case_foreign_name }}_(this)
    {%- endif %}
    {%- for child in object.children %}
    , {{ child | collective_foreign_name }}_(this)
    {%- endfor %}
    {%- for field in object.meta.fields | rejectattr("is_primary") | selectattr("is_column") | rejectattr("system") | rejectattr("is_parent_key_field") %}
    , {{ field.cpp_camel_case_name }}_(this, &{{ field.cpp_camel_case_name }}Descriptor)
    {%- endfor %}
    {%- for field in object.meta.reference_fields %}
    , {{ field.cpp_camel_case_name }}_(
        this,
        {{ field.cpp_camel_case_name }}Descriptor,
        std::make_unique<NYT::NOrm::NServer::NObjects::T{{ field.reference.key_storage_kind}}{{ field.reference.kind}}KeyStorageDriver>(this, {{ field.cpp_camel_case_name }}Descriptor.KeyStorageDescriptor))
        {%- endfor %}
    {%- for field in object.meta.foreign_view_fields_deprecated %}
    , {{ field.cpp_camel_case_name }}_(this)
    {%- endfor %}
    {%- for field in object.meta.view_fields %}
    , {{ field.cpp_camel_case_name }}_(this)
    {%- endfor %}
    , MetaEtc_(this, &MetaEtcDescriptor)
    {%- if object.spec.is_cpp_composite %}
    , Spec_(this)
    {%- else %}
    , Spec_(this, &SpecDescriptor)
    {%- endif %}
    {%- if object.status.is_cpp_composite %}
    , Status_(this)
    {%- else %}
    , Status_(this, &StatusDescriptor)
    {%- endif %}
{
    {%- for index in object.indexes | rejectattr("underlying_table") %}
    RegisterScalarAttributeIndex(
        "{{ index.snake_case_name }}",
        std::make_unique<NYT::NOrm::NServer::NObjects::{{ "TRepeatedScalarAttributeIndex" if index.is_repeated else "TScalarAttributeIndex" }}>(
            typeHandler->GetIndexDescriptorOrThrow("{{ index.snake_case_name }}"),
            this,
            {{ generate_index_attributes(index.index_attributes) | indent(8) }},
            {{ generate_index_attributes(index.predicate_attributes) | indent(8) }}
            {%- if not index.is_repeated %},
            /*unique*/ {{ index.is_unique | to_cpp_bool }}
            {%- endif %}));
    {%- endfor %}
}
{%- if object.custom_cpp_object %}

T{{ object.camel_case_name }}::~T{{ object.camel_case_name }}()
{ }
{%- endif %}

////////////////////////////////////////////////////////////////////////////////

NYT::NOrm::NClient::NObjects::TObjectKey T{{ object.camel_case_name }}::GetKey() const
{
    return NYT::NOrm::NServer::NObjects::TObjectKey(
    {%- for field in object.key_fields %}
        Get{{ field.cpp_camel_case_name }}(){{ "," if not loop.last else ");" }}
    {%- endfor %}
}

{%- if object.parent %}

NYT::NOrm::NClient::NObjects::TObjectKey T{{ object.camel_case_name }}::GetParentKey(
    std::source_location location) const
{
    return ParentKeyAttribute_.GetKey(location);
}

NYT::NOrm::NServer::NObjects::TParentKeyAttribute* T{{ object.camel_case_name }}::GetParentKeyAttribute()
{
    return &ParentKeyAttribute_;
}

{%- for field in object.all_key_fields | selectattr("is_parent_key_field") %}

{{ field.cpp_type }} T{{ object.camel_case_name }}::{{ object.parent.camel_case_foreign_name }}{{ field.cpp_camel_case_name }}(std::source_location location) const
{
    return GetParentKey(location).GetWithDefault<{{ field.cpp_type }}>({{ loop.index0 }});
}
{%- endfor %}
{%- endif %}

void T{{ object.camel_case_name }}::ScheduleUuidLoad() const
{
    MetaEtc().ScheduleLoad();
}

NYT::NOrm::NClient::NObjects::TObjectId T{{ object.camel_case_name }}::GetUuid(
    std::source_location location) const
{
    return MetaEtc().Load(location).uuid();
}

TString T{{ object.camel_case_name }}::GetName(
    std::source_location location) const
{
    return MetaEtc().Load(location).name();
}
{%- endmacro -%}
