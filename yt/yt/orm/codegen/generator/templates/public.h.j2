// AUTOMATICALLY GENERATED. DO NOT EDIT!

#pragma once

#include <{{ client_misc_lib }}/enums.h>
#include <{{ client_misc_lib }}/schema_transitive.h>

#include <yt/yt/orm/server/master/public.h>

#include <yt/yt/orm/server/objects/public.h>
#include <yt/yt/orm/server/objects/semaphore_detail.h>
#include <yt/yt/orm/server/objects/semaphore_set_detail.h>

#include <library/cpp/yt/memory/ref_counted.h>

namespace {{ cpp_server_plugins_namespace }} {

////////////////////////////////////////////////////////////////////////////////

{%- for object in objects if object.custom_cpp_object %}
class T{{ object.camel_case_name }};
{%- endfor %}

////////////////////////////////////////////////////////////////////////////////

} // {{ cpp_server_plugins_namespace }}

namespace {{ cpp_server_namespace }} {

////////////////////////////////////////////////////////////////////////////////

DECLARE_REFCOUNTED_CLASS(TMasterConfig)
DECLARE_REFCOUNTED_CLASS(TMasterDynamicConfig)

{%- if not custom_dynamic_config_manager %}
DECLARE_REFCOUNTED_STRUCT(IDynamicConfigManager)
{%- endif %}

{%- if cpp_server_namespace != cpp_objects_namespace %}

////////////////////////////////////////////////////////////////////////////////

} // namespace {{cpp_server_namespace}}

////////////////////////////////////////////////////////////////////////////////

namespace {{ cpp_objects_namespace }} {
{%- endif %}

////////////////////////////////////////////////////////////////////////////////

{% for object in objects -%}
class T{{ object.camel_case_name }};
{%- endfor %}

using TFinalSemaphore = NYT::NOrm::NServer::NObjects::TSemaphoreMixin<TSemaphore, {{ cpp_data_model_proto_namespace }}::TSemaphore>;
using TFinalSemaphoreSet = NYT::NOrm::NServer::NObjects::TSemaphoreSetMixin<
    TSemaphoreSet,
    TFinalSemaphore,
    {{ cpp_data_model_proto_namespace }}::TSemaphoreSet,
    {{ cpp_data_model_proto_namespace }}::TSemaphore
>;

////////////////////////////////////////////////////////////////////////////////

using {{ client_misc_cpp_namespace }}::EObjectType;

{%- for enum in public_enums | sort(attribute='name') %}
using {{ client_misc_cpp_namespace }}::{{enum.name}};
{%- endfor %}

////////////////////////////////////////////////////////////////////////////////

} // namespace {{ cpp_objects_namespace }}
