#include "objects.h"
{%- set snapshot = snapshots[snapshot_name] %}

{% if snapshot.cpp_namespace -%}
namespace {{ snapshot.cpp_namespace }} {
{%- endif %}

{%- for object in snapshot.objects %}

////////////////////////////////////////////////////////////////////////////////

{{ object.cpp_key_type }} {{ object.cpp_key_type }}::Parse(::NYT::NOrm::NClient::NNative::TPayload payload)
{
    return ::NYT::Visit(
        std::move(payload),
        [] (::NYT::NOrm::NClient::NNative::TNullPayload&&) -> {{ object.cpp_key_type }} {
            YT_ABORT();
        },
        [] (::NYT::NOrm::NClient::NNative::TProtobufPayload&&) -> {{ object.cpp_key_type }} {
            YT_UNIMPLEMENTED();
        },
        [] (::NYT::NOrm::NClient::NNative::TYsonPayload&& payload) -> {{ object.cpp_key_type }} {
            auto map = ::NYT::NYTree::ConvertTo<::NYT::NYTree::IMapNodePtr>(std::move(payload.Yson));
            return {{ object.cpp_key_type }}(
                {%- for field in object.key_fields %}
                ::NYT::NYTree::ConvertTo<{{ field.cpp_type }}>(map->FindChild("{{ field.snake_case_name }}")){% if not loop.last %}, {% endif %}
                {%- endfor %});
        });
}

{{ object.cpp_key_type }} {{ object.cpp_key_type }}::Parse(
    std::vector<::NYT::NOrm::NClient::NNative::TPayload> payloads)
{
    {%- for field in object.key_fields %}
    {{ field.cpp_type }} {{ field.lower_camel_case_name }};
    {%- endfor %}

    ::NYT::NOrm::NClient::NNative::ParsePayloads(
        std::move(payloads),
        ::NYT::NOrm::NClient::NNative::TParsePayloadsOptions{},
        {%- for field in object.key_fields %}
        &{{ field.lower_camel_case_name }}{% if not loop.last %}, {% endif %}
        {%- endfor %});

    return {{ object.cpp_key_type }}(
        {%- for field in object.key_fields %}
        std::move({{ field.lower_camel_case_name }}){% if not loop.last %}, {% endif %}
        {%- endfor %});
}

{%- endfor %}

{%- for object in snapshot.objects %}

////////////////////////////////////////////////////////////////////////////////

::NYT::TIntrusivePtr<{{ object.cpp_data_type }}> {{ object.cpp_data_type }}::Parse(
    std::vector<::NYT::NOrm::NClient::NNative::TPayload> payloads)
{
    {%- for field in object.all_fields %}
    {{ field.cpp_type }} {{ field.lower_camel_case_name }};
    {%- endfor %}

    ::NYT::NOrm::NClient::NNative::ParsePayloads(
        std::move(payloads),
        ::NYT::NOrm::NClient::NNative::TParsePayloadsOptions{
            .UnknownFieldMode = ::NYT::NOrm::NClient::NNative::EUnknownFieldMode::Skip,
        },
        {%- for field in object.all_fields %}
        &{{ field.lower_camel_case_name }}{% if not loop.last %}, {% endif %}
        {%- endfor %});

    return ::NYT::New<{{ object.cpp_data_type }}>(
        {%- for field in object.all_fields %}
        std::move({{ field.lower_camel_case_name }}){% if not loop.last %}, {% endif %}
        {%- endfor %});
}

{%- endfor %}

{%- for object in snapshot.objects %}

////////////////////////////////////////////////////////////////////////////////

const ::NYT::NOrm::NSnapshot::TObjectAttributeDescription {{ object.cpp_type }}::AttributeDescription = {
    .KeyAttributeSelector = {
        {%- for field in object.key_fields %}
        "{{ field.path }}",
        {%- endfor %}
    },
    .DataAttributeSelector = {
        {%- for field in object.data_fields %}
        "{{ field.path }}",
        {%- endfor %}
    },
    .AllAttributeSelector = {
        {%- for field in object.all_fields %}
        "{{ field.path }}",
        {%- endfor %}
    },
    .KeyFields = {
        {%- for field in object.key_fields %}
        "{{ field.snake_case_name }}",
        {%- endfor %}
    },
};

{%- endfor %}

////////////////////////////////////////////////////////////////////////////////

{% if snapshot.cpp_namespace -%}
} // namespace {{ snapshot.cpp_namespace }}
{%- endif %}

{%- for object in snapshot.objects %}

size_t THash<{{ snapshot.cpp_namespace }}::{{ object.cpp_key_type }}>::operator()(const {{ snapshot.cpp_namespace }}::{{ object.cpp_key_type }}& key) const
{
    size_t hash = 0;
    {%- for field in object.key_fields %}
    NYT::HashCombine(hash, key.{{ field.camel_case_name }}());
    {%- endfor %}
    return hash;
}

{%- endfor %}

////////////////////////////////////////////////////////////////////////////////
